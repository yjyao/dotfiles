#!/usr/bin/env bash

# Cache command output for 600 seconds.

progname="$(basename "$0")"
usage() {
  cat <<EOF
Usage: ${progname} [OPTION]... -- [COMMAND]...
Run COMMAND with a cache. With an entirely identical COMMAND invoked within a
TTL, read output from cache. The default TTL is "10m".

Options:

    -t, --ttl=SPEC    Cache TTL specification. Examples: "1d2h3m4s", "3m",
                      "10" or "10s", "2h3s".
    -f, --force       Run COMMAND without checking cache.

Examples:

    $ ${progname} echo hello world
    $ ${progname} 'sleep 2; echo hey'
EOF

  [[ $1 ]] && exit "$1"
}

die() {
  >&2 echo "$@"
  exit 1
}

prog="$(basename "$0")"

cache_dir="${HOME}/.cache/${prog}"
mkdir -p "${cache_dir}"

ttl='10m'

params="$(getopt -o t:,f -l ttl:,force -- "$@")" || usage 1
eval set -- "$params"
while [[ $# > 0 ]]; do
  case $1 in
    -t|--ttl )
      ttl="$2"
      shift
      ;;
    -f|--force )
      forced=1
      ;;
    -- )
      shift
      break
      ;;
  esac
  shift
done
cmd="$@"

[[ $cmd ]] || { >&2 printf "No command to run. Abort.\n\n"; usage 1; }

if [[ $forced ]]; then
  ttl_seconds=0
else
  [[ $ttl =~ ([0-9]+d)?([0-9]+h)?([0-9]+m)?[0-9]+s? ]] ||
    die "Invalid ttl '$ttl'."
  ttl_seconds="$(echo "${ttl}" |
                 sed 's/d/*24*60*60+/;s/h/*60*60+/;s/m/*60+/;s/s//;s/+$//' |
                 bc)"
fi

cache="${cache_dir}/$(echo "$cmd" | md5sum | awk '{print $1}')"
[[ -f "$cache" ]] && cache_mtime="$(date -r "$cache" +%s)" || cache_mtime=0
(( $(date +%s) - cache_mtime > ttl_seconds )) && eval "$cmd" > "$cache"
cat "$cache"
