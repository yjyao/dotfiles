priority -40

global !p
texMathZones = ['texMathZone' + x
                for x in [
  'A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS',
  'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X',
  'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS',
  'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval("map(%s, 'hlID(v:val)')" % texMathZones)
texIgnoreMathZoneIds = vim.eval("map(%s, 'hlID(v:val)')" % texIgnoreMathZones)

ignore = texIgnoreMathZoneIds[0]

def math():
  synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
  try:
    first = next(i for i in reversed(synstackids)
                 if i in texIgnoreMathZoneIds or i in texMathZoneIds)
    return first != ignore
  except StopIteration:
    return False
endglobal


# environments
# -----------------------------------------------------------------------------

snippet cls "Document class" b
\documentclass`!p snip.rv='[' if t[2] else ''`${2:options}`!p snip.rv = ']' if t[2] else ''`{${1:a}${1/(a)$|(b)$|(s)$|(.*)/(?1:rticle)(?2:ook)(?3:tandalone)/}}
$0
endsnippet

snippet doc "\begin / \end document" b
\begin{document}
$0
\end{document}
endsnippet

snippet "\\?b(egin)?" "begin{} / end{}" br
\begin{${1:environment}}$2
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet - "Individual item" b
\item$0
endsnippet

snippet plot "Plot" w
\begin{figure}[${1:htpb}]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin=${2:-10}, xmax=${3:10},
			xlabel={${4:$x$}},
			ymin=${5:-10}, ymax=${6:10},
			ylabel={${7:$y$}},
			smooth,
			axis lines=middle,
		]
			\addplot[domain=$2:$3,] (x, {$8});
		\end{axis}
	\end{tikzpicture}
	\caption{$9}
	\label{fig:$10}
\end{figure}
endsnippet

snippet si "SI" w
\SI{$1}{$2}$0
endsnippet

snippet n "SI number" w
\SI{$1}$0
endsnippet

# math

snippet def "Definition" b
\begin{definition}[${1}]
	\label{def:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0:${VISUAL}}
\end{definition}
endsnippet

snippet ppt "Property" b
\begin{property}[${1}]
	\label{ppt:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0:${VISUAL}}
\end{property}
endsnippet

snippet thm "Theorem" b
\begin{theorem}[${1}]
	\label{thm:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0:${VISUAL}}
\end{theorem}
endsnippet

snippet alnn "Aligned equations (non-numbered)"
\begin{align*}
	$0
	\text.
\end{align*}
endsnippet

snippet lp "Long parenthesis"
\${1:big}l(${0:${VISUAL:contents}}\$1r)$0
endsnippet

# font families
# -----------------------------------------------------------------------------

snippet bf "Boldface text" w
\textbf{${1:${VISUAL}}$0
endsnippet

snippet it "Italian text" w
\textit{${1:${VISUAL}}}$0
endsnippet

snippet sf "Sans serif text" w
\textsf{${1:${VISUAL}}}$0
endsnippet

snippet sc "Small caps text" w
\textsc{${1:${VISUAL}}}$0
endsnippet

snippet rm "Roman text" w
\\${1:m}${1/(m)$|(t)$|(.*)/(?1:ath)(?2:ext)/}rm{${2:${VISUAL}}}$0
endsnippet

snippet em "Emphasis" w
\emph{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mtt "Text in math modes" wA
\text{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet itt "Text in math modes" wA
\intertext{${1:${VISUAL}}}$0
endsnippet

snippet cal "Mathcal" w
\mathcal{$1}$0
endsnippet

snippet bb "Mathbb" w
\mathbb{$1}$0
endsnippet

# math
# -----------------------------------------------------------------------------

# snippet m "Inline math mode" w
# $${1:${VISUAL}}`!p snip.rv='\n' if t[1].startswith('\n') else ''`$$0
# endsnippet

snippet m "Inline math mode" w
$${1}$`!p
if t[2] and t[2][0] not in ',.?- ':
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mx "Inline math mode" iA
$${1}$`!p
if t[2] and t[2][0] not in ',.?- ':
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet \ "display math mode" w
\[
	${1:${VISUAL}}
	\text.
\]$0
endsnippet

# greek letters

snippet ga "alpha" w
\alpha
endsnippet

snippet gb "beta" w
\beta
endsnippet

snippet gc "chi" w
\chi
endsnippet

snippet gd "delta" w
\delta
endsnippet

snippet ge "varepsilon" w
\varepsilon
endsnippet

snippet gf "varphi" w
\varphi
endsnippet

snippet gg "gamma" w
\gamma
endsnippet

snippet gh "eta" w
\eta
endsnippet

snippet gk "kappa" w
\kappa
endsnippet

snippet gl "lambda" w
\lambda
endsnippet

snippet gm "mu" w
\mu
endsnippet

snippet gn "nu" w
\nu
endsnippet

snippet go "omega" w
\omega
endsnippet

snippet gp "pi" w
\pi
endsnippet

snippet gq "theta" w
\theta
endsnippet

snippet gr "rho" w
\rho
endsnippet

snippet gs "sigma" w
\sigma
endsnippet

snippet gt "tau" w
\tau
endsnippet

snippet gu "upsilon" w
\upsilon
endsnippet

snippet gv "vee" w
\vee
endsnippet

snippet gw "wedge" w
\wedge
endsnippet

snippet gz "zeta" w
\zeta
endsnippet

snippet gD "Delta" w
\Delta
endsnippet

snippet gF "Phi" w
\Phi
endsnippet

snippet gG "Gamma" w
\Gamma
endsnippet

snippet gL "Lambda" w
\Lambda
endsnippet

snippet gN "nabla" w
\nabla
endsnippet

snippet gO "Omega" w
\Omega
endsnippet

snippet gQ "Theta" w
\Theta
endsnippet

snippet gR "Varrho" w
\varrho
endsnippet

snippet gU "Upsilon" w
\Upsilon
endsnippet

snippet gX "Xi" w
\Xi
endsnippet

snippet gY "Psi" w
\Psi
endsnippet

# symbols

# letter-digit triggers need an underscore in between (e.g., `s0` -> `s_0`)
# to work with auto subscript expansion.

snippet s_0 "Empty set" i
\emptyset
endsnippet

snippet s_6 "Partial symbol" i
\partial
endsnippet

context "math()"
snippet soo "Infinity symbol" iA
\infty
endsnippet

snippet s_8 "Infinity symbol" i
\infty
endsnippet

snippet s@ "Circle" w
\circ
endsnippet

snippet s: "Dots / epsilons" w
\dots
endsnippet

snippet s. "Centered dot" w
\cdot
endsnippet

snippet s~ "tilde{}" w
\tilde{$1}$0
endsnippet

snippet s^ "hat{}" w
\hat{$1}$0
endsnippet

snippet s- "bar{}" w
\bar{$1}$0
endsnippet

context "math()"
snippet cc "subset" iA
\subset
endsnippet

context "math()"
snippet EE "exists" iA
\exists
endsnippet

context "math()"
snippet AA "for all" iA
\forall
endsnippet

context "math()"
snippet <- "in / belongs to" iA
\in
endsnippet

context "math()"
snippet => "implies" iA
\implies
endsnippet

context "math()"
snippet -> "to" iA
\to
endsnippet

snippet ~ "similarity" w
\sim
endsnippet

snippet ~~ "approximity" w
\approx
endsnippet

snippet s= "equivalence" w
\equiv
endsnippet

context "math()"
snippet == "equals (aligned)" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "not equal" iA
\neq
endsnippet

context "math()"
snippet <= "less or equal" iA
\le
endsnippet

context "math()"
snippet >= "greater or equal" iA
\ge
endsnippet

context "math()"
snippet << "much less than" iA
\ll
endsnippet

context "math()"
snippet >> "much greater than" iA
\gg
endsnippet

snippet s* "times" w
\times
endsnippet

context "math()"
snippet sxx "times" iA
\times
endsnippet

context "math()"
snippet // "auto frac" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '(\d+|\d*\\?[a-zA-Z]+([_^]\{?[a-zA-Z0-9]\}?)*)/' "auto frac" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 10000
context "math()"
snippet '(^.*\))/' "auto fraction with parentheses" wrA
`!p
line = match.group(1)
depth = 0
for i, c in reversed(tuple(enumerate(line))):
	if c == ')':
		depth += 1
	if c == '(':
		depth -= 1
	if not depth:
		break
paren_content = line[i:][1:-1]  # Strip the parentheses.
snip.rv = r"%s\frac{%s}" % (line[:i], paren_content)
`{$1}$0
endsnippet
priority -40

snippet s_2 "square root" i
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet '([a-zA-Z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([a-zA-Z])_(\d\d)' "auto subscript (multiple digits)" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ([xyz])([ijkmn]) "auto subscript: x_i, y_j, etc." iA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet _ "subscript" i
_{$1}$0
endsnippet

context "math()"
snippet sr "squared" iA
^2
endsnippet

context "math()"
snippet cb "cubed" iA
^3
endsnippet

context "math()"
snippet invs "complement" iA
^{-1}
endsnippet

context "math()"
snippet cmpl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^`!p snip.rv = "{" if len(t[1]) > 1 else ""`$1`!p snip.rv = "}" if len(t[1]) > 1 else ""`$0
endsnippet

snippet ^ "superscript" i
^{$1}$0
endsnippet

context "math()"
snippet der "Derivative" wA
\frac{\dif`!p snip.rv = t[1] and ' '`$1}{\dif $2}$0
endsnippet

context "math()"
snippet int "Integral" wA
\int`!p snip.rv=t[1] and '_{'`${1:from}`!p snip.rv=t[1] and '}'``!p snip.rv=t[2] and '^{'`${2:to}`!p snip.rv=t[2] and '}'` $3 \dd $0
endsnippet

context "math()"
snippet sum "Summation" wA
\sum`!p snip.rv=t[1] and '_{'`${1:from}`!p snip.rv=t[1] and '}'``!p snip.rv=t[2] and '^{'`${2:to}`!p snip.rv=t[2] and '}'` $0
endsnippet

context "math()"
snippet lim "Limit" wA
\lim_{${1}`!p snip.rv=t[2] and ' \\to '`${2:\infty}} $0
endsnippet
