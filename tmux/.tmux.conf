# Tell apps that this terminal supports true-colors.
set-option -ga terminal-overrides ",*-256col*:Tc"
# Must be `screen*` or `tmux*`
# `tmux-256color` seems to handle colors better
set -g default-terminal "tmux-256color"

# Start window number at 1; 0 is too far from the prefix
set -g base-index 1

# Scroll back buffer size
set -g history-limit 5000

# Also display-message upon bells
# Manually trigger a bell with `tput bel` or `echo -e '\a'`
set-window-option -g visual-bell both
# Only notify bell from other windows
set-window-option -g bell-action other
# For display-message
set -g display-time 4000
# Higher profile display-message
set -g message-style 'fg=white,bright bg=blue'
# Style of window names where there is a bell
set -g window-status-bell-style 'fg=red blink'

# Reduce delay on Escape key presses. Default is 500.
set -g escape-time 40

# TMux supports repeating a command
# by rapidly hitting a key combination
# for bindings with `-r` enabled.
# Two commands are entered "rapidly"
# if within the threshold of `repeat-time` in milliseconds.
# Sometimes it is more convenient to hold the key.
# However, many keyboards has an initial delay
# before it repeats the key rapidly.
# This prevents it from treating hesitant key presses
# as held down key presses.
# In this case,
# the initial delay is usually longer than
# tmux's default `repeat-time`.
# Therefore,
# we should ideally set `repeat-time`
# to be just over the keyboard's initial delay.
set -g repeat-time 700

# Open new window/pane under the current pane's directory
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind P popup -E '$SHELL -l'

# Send the same command to all panes/windows/sessions
bind E command-prompt -p 'Command:' \
       "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \
              | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Vi motions
set-window-option -g mode-keys vi
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection

# Resize pane by window ratio.
bind C-w command-prompt -1p 'Set pane width to window width / 10 *' \
       "resize-pane -x '%1''0%'"
bind C-h command-prompt -1p 'Set pane height to window height / 10 *' \
       "resize-pane -y '%1''0%'"

# Resize pane by steps.
# The step varies depending on the ratio between the pane and the window.
# It will be increasingly difficult/slow to expand/shrink a pane
# depending on how much estate it currently occupies.

# The maximum expansion/contraction speed is 20% of window height/width.

# The parameters:
#
# - 20 is the maximum `delta_percent`
# - 25 controls the curvature / how fast the speed decreases
# - 30 has a positive correlation with the minimum `delta_percent`
#
# You should make sure the `delta_percent` stays positive throughout [0, 100].
# You can play with the parameters with a plot at
# https://www.wolframalpha.com/input?i=plot+%2820*a%29%2F%28x+%2B+a%29+-+1%2F30+*+x+where+a%3D+25%2C+x+from+0+to+100.
pane_resize_height_formula="
        height_percent = 100 * #{pane_height} / #{window_height},
        x = (expanding ? height_percent : (100 - height_percent)),
        delta_percent = ((20 * 25) / (x + 25) - x * 1/30),
        #{window_height} * delta_percent/100
"

pane_resize_width_formula="
        width_percent = 100 * #{pane_width} / #{window_width},
        x = (expanding ? width_percent : (100 - width_percent)),
        delta_percent = ((20 * 25) / (x + 25) - x * 1/30),
        #{window_width} * delta_percent/100
"

bind-key -r C-Up run "tmux resize-pane -U \"$((
      expanding = #{pane_at_bottom}, ${pane_resize_height_formula} ))\""
bind-key -r M-Up resize-pane -U

bind-key -r C-Down run "tmux resize-pane -D \"$((
      expanding = (1 - #{pane_at_bottom}), ${pane_resize_height_formula} ))\""
bind-key -r M-Down resize-pane -D

bind-key -r C-Left run "tmux resize-pane -L \"$((
      expanding = #{pane_at_right}, ${pane_resize_width_formula} ))\""
bind-key -r M-Left resize-pane -L

bind-key -r C-Right run "tmux resize-pane -R \"$((
      expanding = (1 - #{pane_at_right}), ${pane_resize_width_formula} ))\""
bind-key -r M-Right resize-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +((\\S+\\/)?g?(view|n?vim?x?)(diff)?|sensible-editor)$'"
bind -T root C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -T root C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -T root C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -T root C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -T root 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l

# Screen cleaning
bind C-l send-keys 'C-l'

# Cut to end of line
bind C-k send-keys 'C-k'

# Search up
bind ? copy-mode \; send-keys ?

# Reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded"

color_off_status_fg="default"
color_off_status_bg="colour238" # gray
color_off_indicator_fg="black"
color_off_indicator_bg="colour245" # light gray

# Toggle tmux keybindings for nested tmux sessions
# https://gist.github.com/samoshkin/05e65f7f1c9b55d3fc7690b59d678734
# Press Ctrl+F9 to completely turn off tmux key bindings. Press again to turn
# back on.
bind -T root C-F9  \
  set prefix None \;\
  set key-table off \;\
  set status-style "fg=$color_off_status_fg,bg=$color_off_status_bg" \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S
bind -T off C-F9 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S
wg_is_keys_off="#[fg=$color_off_indicator_fg,bg=$color_off_indicator_bg]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"
set -g status-right "$wg_is_keys_off "

bind -T off C-f switch-client -T global-keys
bind -n C-f switch-client -T global-keys

bind -T global-keys C-f send-keys 'C-f'
bind -T global-keys [ copy-mode
bind -T global-keys ] paste-buffer
bind -T global-keys ? copy-mode \; send-keys ?

# Toggle mouse control, init to off
set -g mouse off
bind C-m set -g mouse

# list of plugins
set -g @plugin 'tmux-plugins/tpm'  # required

set -g @plugin 'tmux-plugins/tmux-resurrect' # saves tmux sessions
set -g @plugin 'tmux-plugins/tmux-continuum' # continuous tmux-resurrect save in background
# NOTE: requirements on `default-command`: https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md
set -g @resurrect-capture-pane-contents 'on'

set -g @plugin 'tmux-plugins/tmux-yank'  # copies tmux-buffer to system clipboard.

set -g @plugin 'laktak/extrakto'  # extract content from screen
set -g @extrakto_key 'e'
set -g @extrakto_grab_area 'window full'
set -g @extrakto_copy_key 'ctrl-y'
set -g @extrakto_insert_key 'enter'
set -g @extrakto_popup_position P
set -g @extrakto_popup_size 90%,10

# set -g @plugin 'abhinav/tmux-fastcopy'
set -g @plugin 'yjyao/tmux-fastcopy#dev'
set-option -g @fastcopy-key 'tab'
# After activating tmux-fastcopy with <prefix><tab>,
# enter hints to select and insert text
# into the current pane.
set-option -g @fastcopy-action "$HOME/.tmux/scripts/fastcopy-handler.sh"
# Enter the hint while pressing down `shift`
# to copy the selected text
# without entering it into the pane.
set-option -g @fastcopy-shift-action "$HOME/.tmux/scripts/fastcopy-handler.sh --noinsert"
set-option -g @fastcopy-tail-hint 'true'
set-option -g @fastcopy-alphabet uhidetonaspgkmyfxbcjwrqvlz # dvorak

PATH_REGEX_HOME='\~(/[\w.-]+)+'
PATH_REGEX_FILE='([\w.-]+)?(/[\w.-]+)+\.\w+'
PATH_REGEX_OTHER='([\w.-]+)?(/[\w.-]+){2,}'
set-option -g @fastcopy-regex-path "\"{0}(?:[^/:\\w~.-])($PATH_REGEX_HOME|$PATH_REGEX_FILE|$PATH_REGEX_OTHER)\\b"
set-option -g @fastcopy-regex-int '((-?|\b)\d{5,}\b)'
set-option -g @fastcopy-regex-flag '"{0}\s(--[\w-]+\b)'

# URL opener using tmux-fastcopy.
fastcopy_url_flags='\
--regex "ipv4:" --regex "gitsha:" --regex "hexaddr:" \
--regex "hexcolor:" --regex "int:" --regex "path:" \
--regex "uuid:" --regex "flag:" --regex "isodate:" \
--regex "url:\b(https?://([\w-]+)(\.[\w-]+)+(:\d+)?(/[\w-]*(\.[\w-]+)?)*(#[\w=-]+)?(/?\?[\w@:%+.~#&/=-]*)?)" \
'

bind u run -b "\$TMUX_PLUGIN_MANAGER_PATH/tmux-fastcopy/bin/tmux-fastcopy --action '$BROWSER {}' ${fastcopy_url_flags}"
bind -T global-keys u run -b "\$TMUX_PLUGIN_MANAGER_PATH/tmux-fastcopy/bin/tmux-fastcopy --action '$BROWSER {}' ${fastcopy_url_flags}"

set -g  @plugin 'yjyao/tmux-quick-manual'

source-file -q ~/.tmux/configs/*.conf

# initialize tmux plugin manager
if-shell '[ -r ~/.tmux/plugins/tpm/tpm ]' "run -b '~/.tmux/plugins/tpm/tpm'"
